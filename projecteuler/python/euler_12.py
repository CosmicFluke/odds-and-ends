#!/usr/bin/env python3

__author__ = "Asher Minden-Webb"
__title__ = "Project Euler Problem 12: Highly divisible triangular number"
__date_created__ = "2014/09/11"

'''
URL: https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?

'''

def count_factors(n: int) -> int:
	''' 
	Counts the number of positive factors of n
	'''
	n = abs(n)
	if n <= 1:
        return n
    facts = 2 # Initialize with 1 and n as factors
    for test in range(2, int(n ** 0.5) + 1):
        if n % test == 0:
            facts += 2
	# Deal with case where n is a perfect square
    if (n ** 0.5) * (n ** 0.5) == n:
        facts -= 1
    return facts
	
	
def n_divisors(n: int) -> (int, int):
	''' 
	Finds the value of the first triangle number to have over n divisors.
	Returns a tuple containing the found triangle number, and its rank.
	'''
	# Initialize the first triangle number & number of divisors
	tri = 0
	divs = 0
	
	# Initialize counter
	i = 1
    while divs <= n:
		tri = tri + i
		i += 1
	    divs = count_factors(tri)
    return tri, i
	
if __name__ == "__main__":
    print(n_divisors(500))